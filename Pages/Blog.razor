@page "/blog"
@inject IHashNodeGqlApi hashNodeGql
@inject IJSRuntime jsRuntime

<PageTitle>My Blog</PageTitle>



@if (hashnodeData is null)
{
    <button @onclick="GetAllBlogPosts" class="btn btn-primary">Get Blog</button>
}

@if (spinner)
{
    <LoadingSpinnerSpin></LoadingSpinnerSpin>
}

@if (post is null)
{
    @if (hashnodeData is null)
    {
        <p> Try to get some</p>
    }
}
else
{
    <ModalComponent Show="readmore" OnClose="DialogCancelHandler">
        <Title>@post.data.post.title</Title>
        <Body>
            <div @ref=focusToTop></div>
            @((MarkupString)@post.data.post.content)
        </Body>
    </ModalComponent>
}

@*get posts for populated page*@
@if (hashnodeData is null)
{
    <p>Click the Get Blog button</p>
}
else
{
    @foreach (var item in hashnodeData.data.user.publication.posts)
    {
        <PostsContent CoverImage="@item.coverImage"
              Title="@item.title"
              Brief="@item.brief"
              onClickGetSlug=@(() => GetPost(item.slug))></PostsContent>
    }
}

@code {
    private HashNodeModel? hashnodeData;
    public HashNodePostModel? post;
    public bool readmore = false;
    private bool spinner = false;
    public ElementReference focusToTop;


    public void DialogCancelHandler(MouseEventArgs e)
    {
        //Console.WriteLine("readmore on close"+ readmore);
        readmore = false;
        post!.data.post.content = string.Empty;
        post.data.post.coverImage = string.Empty;
    }

    public async Task FocusToTop()
    {
        await jsRuntime.InvokeVoidAsync("getHashNodeInterop.focusToTop", focusToTop);
    }

    public async Task GetPost(string slug)
    {
        //Console.WriteLine("read more on getpost "+readmore);
        //Console.WriteLine("slug on blog "+ slug);
        spinner = true;
        readmore = true;
        post = await hashNodeGql.GetPost(slug);
        spinner = false;
        await FocusToTop();
        await Task.CompletedTask;
    }

    private async Task GetAllBlogPosts()
    {
        spinner = true;
        hashnodeData = await hashNodeGql.GetAllBlogPosts();
        spinner = false;
        await Task.CompletedTask;
    }

    public void Dispose()
    {
    }
}
