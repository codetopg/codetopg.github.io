@page "/fetchdata"
@implements IDisposable
@inject IGetWeatherApi getWeather
@inject IJSRuntime jsRuntime

<PageTitle>Open API Weather forecast</PageTitle>
@if (spinner)
{
    <LoadingSpinnerSpin></LoadingSpinnerSpin>
}

@if (weatherData is null)
{
    <p>@errorMessages</p>
}
else
{
    while (weatherData is null)
    {
        <LoadingSpinnerDefault></LoadingSpinnerDefault>
    }

    <h3>Weather forecast for: @weatherData.city.name</h3>

    <div class="card-group">
        @for (int i = 0; i < weatherData.list.Length; i++)
        {
            <WeatherComponent Seconds="@weatherData.list[i].dt"
                      LowTemp="@weatherData.list[i].main.temp_max"
                      HighTemp="@weatherData.list[i].main.temp_max"
                      Description="@weatherData.list[i].weather[0].description"
                      Icon="@weatherData.list[i].weather[0].icon" />
            i += 7;
        }
    </div>
}


@if (coords == null)
{
    <LoadingSpinnerDefault></LoadingSpinnerDefault>
}
else
{
    @if (show)
    {
        @if (weatherData is null)
        {
            <button @onclick="GetForcast" class="btn btn-primary">Get Forcast for the next 5 days</button>
        }
        
    }
   

}

@if (show == false)
{
    <button class="btn btn-primary" @onclick=GetPosition>Get Coords</button>
}



@if (location is not null)
{
    <p>coords: @location.Longitude and @location.Latitude</p>
}


@code {
    private GetCoords? coords;
    private CoordsModel? location;
    //private GetWeatherApi weather; inject Interface on top
    public OpenWeatherModel? weatherData { get; set; }
    private string? errorMessages;
    private bool spinner = false;
    private bool show = false;

    private async Task GetPosition()
    {
        try
        {
            spinner = true;
            location = await coords!.GetCoord();
            //Console.WriteLine("coods on blazor " + location.Longitude + " latitude" + location.Latitude);
            spinner = false;
            show = true;
            await Task.CompletedTask;
        }
        catch (Exception e)
        {
            errorMessages = "Enable location service to us this feature!";
            Console.WriteLine(e.Message.ToString());
        }
    }

    public async Task GetForcast()
    {
        show = true;
        await GetPosition();
        double lon = location!.Longitude;
        double lat = location.Latitude;
        //Console.WriteLine("long lat from blazor page" + lon + " lat " + lat);
        weatherData = await getWeather.GetForcast(lon, lat);        
        await Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
       coords = new(jsRuntime);
    }
    public void Dispose() => coords?.Dispose();
}
