@page "/fetchdata"
@using codeTopGBlazorWasm.Components
@using codeTopGBlazorWasm.Models
@using System.Text
@inject HttpClient http
@inject IJSRuntime jsRuntime

<PageTitle>Open API Weather forecast</PageTitle>

@if (weatherData is null)
{
    <p>@errorMessages</p>
}
else
{
    while (weatherData is null)
    {
      <LoadingSpinnerSpin></LoadingSpinnerSpin>  
    }

    <h3>Weather forecast for: @weatherData.city.name</h3>

    <div class="card-group">
        @for (int i = 0; i < weatherData.list.Length; i++)
        {
            <WeatherComponent Seconds="@weatherData.list[i].dt"
                      LowTemp="@weatherData.list[i].main.temp_max"
                      HighTemp="@weatherData.list[i].main.temp_max"
                      Description="@weatherData.list[i].weather[0].description"
                      Icon="@weatherData.list[i].weather[0].icon" />
            i += 7;
        }
        
        @*@foreach (var item in weatherData.list.Take(6))
        {
            <WeatherComponent Seconds="@item.dt"
                   LowTemp="@item.main.temp_min"
                   HighTemp="@item.main.temp_max"
                   Description="@item.weather[0].description"
                   Icon="@item.weather[0].icon" />
                   
        }*@
    </div>
}


@if (position == null)
{
    <LoadingSpinnerDefault></LoadingSpinnerDefault>
}
else
{
    if(_url.Length == 0)
    {
        <button @onclick="GetForcast" class="btn btn-primary">Get Forcast for the next 5 days</button>
    }
}

@code {
    private Location? position;
    private OpenWeatherModel? weatherData;
    private string _url ="";
    private string? errorMessages;

    private async Task GetPosition()
    {
        position = await jsRuntime.InvokeAsync<Location>("getLocationInterop.getLocation");
    }

    public async Task GetForcast()
    {
        try
        {
            string APIKey = "1f7e64a683b4c7085e693af48155414a";
            _url = $"https://api.openweathermap.org/data/2.5/forecast?" +
                $"lat={position.Latitude}" +
                $"&lon={position.Longitude}" +
                $"&units=metric" +
                $"&appid={APIKey}";
            weatherData = await http.GetFromJsonAsync<OpenWeatherModel>(_url);
            //Console.WriteLine(_url);
        }
        catch (Exception e)
        {
            errorMessages = e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetPosition();            

        }
        catch (Exception e)
        {
            errorMessages = $"Geo Location is not supported. You must enable Geo Location to use this feature! {e.HelpLink}";
            Console.WriteLine(e.Message);
        }

    }

    public class Location
    {
        public Double Longitude { get; set; }
        public Double Latitude { get; set; }
    }
}
